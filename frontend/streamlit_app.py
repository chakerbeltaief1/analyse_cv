import streamlit as st
import requests
import pandas as pd
import json
import os
import base64
from typing import Dict, List, Any, Optional
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
from io import BytesIO

# Configuration de la page
st.set_page_config(
    page_title="Analyse et Classification Intelligente de Donn√©es √† partir de CV",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Fonction pour charger le logo
def load_logo():
    """
    Charge et retourne le chemin du logo s'il existe, sinon retourne None.
    """
    # Liste des chemins possibles pour le logo
    logo_paths = [
        r"C:\analyse_cv\frontend\logo\logo-unilog.png",
    ]
    
    for path in logo_paths:
        if os.path.exists(path) and os.path.getsize(path) > 0:
            return path
    
    return None

# Variables globales
API_URL = "http://localhost:5000"  # URL de l'API Flask

# Fonction pour v√©rifier l'√©tat de l'API
def check_api_health():
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        if response.status_code == 200:
            return response.json()
        return {"status": "unavailable", "error": f"Code d'√©tat: {response.status_code}"}
    except requests.exceptions.RequestException as e:
        return {"status": "unavailable", "error": str(e)}

# Fonction pour cr√©er un graphique de probabilit√©s de classification
def create_classification_chart(classification_data):
    if not classification_data:
        return None
    
    # Extraction des probabilit√©s
    probabilities = classification_data.get("all_probabilities", {})
    
    # Cr√©ation du dataframe pour le graphique
    df = pd.DataFrame({
        "Cat√©gorie": list(probabilities.keys()),
        "Probabilit√©": list(probabilities.values())
    })
    
    # Tri des donn√©es par probabilit√©
    df = df.sort_values("Probabilit√©", ascending=False)
    
    # Cr√©ation du graphique avec Plotly
    fig = px.bar(
        df, 
        x="Cat√©gorie", 
        y="Probabilit√©",
        text="Probabilit√©",
        color="Probabilit√©",
        color_continuous_scale="Viridis",
        title="Probabilit√©s de classification par cat√©gorie"
    )
    
    # Customisation du graphique
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig.update_layout(
        xaxis_title="Cat√©gorie de CV",
        yaxis_title="Probabilit√©",
        yaxis=dict(range=[0, 1]),
        coloraxis_showscale=False
    )
    
    return fig

# Fonction pour cr√©er un graphique radar des comp√©tences
def create_skills_radar(skills: List[str]):
    if not skills or len(skills) == 0:
        return None
    
    # Regroupement des comp√©tences par cat√©gorie
    skill_categories = {
        "Langages de programmation": ["Python", "Java", "C++", "JavaScript", "HTML", "CSS"],
        "Data Science": ["Machine Learning", "Deep Learning", "Data Analysis", "Pandas", "Numpy", "Scikit-learn", "TensorFlow", "Keras", "LLM"],
        "Base de donn√©es": ["SQL", "NoSQL"],
        "Frameworks": ["Django", "Flask", "React"],
        "Visualisation": ["Power BI", "Tableau"],
        "Big Data": ["Spark", "Hadoop", "Hive", "Pig"],
        "Autres": ["Excel"]
    }
    
    # Initialisation des scores par cat√©gorie
    category_scores = {cat: 0 for cat in skill_categories.keys()}
    category_counts = {cat: 0 for cat in skill_categories.keys()}
    
    # Calcul des scores
    for skill in skills:
        for category, cat_skills in skill_categories.items():
            for cat_skill in cat_skills:
                if cat_skill.lower() in skill.lower():
                    category_scores[category] += 1
                    category_counts[category] += 1
                    break
    
    # Normalisation des scores (0 √† 1)
    max_possible = max(len(cat_skills) for cat_skills in skill_categories.values())
    normalized_scores = {}
    for cat, score in category_scores.items():
        if category_counts[cat] > 0:
            normalized_scores[cat] = min(score / max_possible, 1.0)
        else:
            normalized_scores[cat] = 0.0
    
    # Cr√©ation du graphique radar avec Plotly
    categories = list(normalized_scores.keys())
    values = list(normalized_scores.values())
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Comp√©tences'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )
        ),
        title="Profil de comp√©tences"
    )
    
    return fig

# Fonction pour afficher les exp√©riences professionnelles
def display_experiences(experiences: List[Dict[str, Any]]):
    if not experiences or len(experiences) == 0:
        st.info("Aucune exp√©rience professionnelle d√©tect√©e")
        return
    
    # Tri des exp√©riences par date (la plus r√©cente d'abord)
    sorted_exp = sorted(
        experiences, 
        key=lambda x: x.get("Date D√©but", "0000"), 
        reverse=True
    )
    
    for i, exp in enumerate(sorted_exp):
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.subheader(f"{exp.get('Date D√©but', 'N/A')} - {exp.get('Date Fin', 'N/A')}")
            st.caption(f"Type: {exp.get('Type', 'N/A')}")
        
        with col2:
            st.subheader(exp.get("Soci√©t√©", "Entreprise non sp√©cifi√©e"))
            
            if exp.get("sujet"):
                st.markdown(f"**Sujet:** {exp.get('sujet')}")
            
            if exp.get("Technologies") and len(exp.get("Technologies")) > 0:
                st.markdown("**Technologies utilis√©es:**")
                st.write(", ".join(exp.get("Technologies")))
            
            if exp.get("Responsabilit√©s") and len(exp.get("Responsabilit√©s")) > 0:
                st.markdown("**Responsabilit√©s:**")
                for resp in exp.get("Responsabilit√©s"):
                    st.markdown(f"- {resp}")
        
        if i < len(sorted_exp) - 1:
            st.markdown("---")

# Fonction pour afficher la formation
def display_education(education: List[Dict[str, Any]]):
    if not education or len(education) == 0:
        st.info("Aucune formation d√©tect√©e")
        return
    
    # Tri des formations par date (la plus r√©cente d'abord)
    sorted_edu = sorted(
        education, 
        key=lambda x: x.get("Date D√©but", "0000"), 
        reverse=True
    )
    
    for i, edu in enumerate(sorted_edu):
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.subheader(f"{edu.get('Date D√©but', 'N/A')} - {edu.get('Date Fin', 'N/A')}")
            st.caption(f"Type: {edu.get('Type', 'N/A')}")
        
        with col2:
            st.subheader(edu.get("Dipl√¥me", "Dipl√¥me non sp√©cifi√©"))
            if edu.get("Institution"):
                st.markdown(f"**Institution:** {edu.get('Institution')}")
        
        if i < len(sorted_edu) - 1:
            st.markdown("---")

# Fonction pour afficher les projets
def display_projects(projects: List[Dict[str, Any]]):
    if not projects or len(projects) == 0:
        st.info("Aucun projet d√©tect√©")
        return
    
    for i, project in enumerate(projects):
        with st.expander(f"{project.get('title', 'Projet')} {project.get('number', '')}"):
            st.write(project.get('description', 'Pas de description disponible'))
            
            if project.get('technologies') and len(project.get('technologies')) > 0:
                st.markdown("**Technologies utilis√©es:**")
                st.write(", ".join(project.get('technologies')))
        
        if i < len(projects) - 1:
            st.markdown("---")

# Fonction pour analyser un CV via l'API
def analyze_cv(file_bytes):
    try:
        files = {"file": ("cv.pdf", file_bytes, "application/pdf")}
        response = requests.post(f"{API_URL}/analyze", files=files)
        
        if response.status_code == 200:
            return response.json()
        else:
            error_msg = response.json().get("error", str(response.status_code))
            st.error(f"Erreur lors de l'analyse du CV: {error_msg}")
            return None
            
    except Exception as e:
        st.error(f"Erreur de connexion √† l'API: {str(e)}")
        return None

# Interface principale
def main():
    # Charger le logo
    logo_path = load_logo()
    
    # Sidebar avec informations sur l'API
    with st.sidebar:
        # Afficher le logo dans la sidebar
        if logo_path:
            try:
                logo_image = Image.open(logo_path)
                st.image(logo_image, width=150)
            except Exception as e:
                pass
        
        st.title("Analyse et Classification Intelligente de Donn√©es √† partir de CV")
        st.markdown("---")
        
        # V√©rification de l'√©tat de l'API
        api_status = check_api_health()
        
        if api_status.get("status") == "healthy":
            st.success("‚úÖ API Connect√©e")
            st.markdown(f"URL: `{API_URL}`")
            
            # Affichage des informations sur les mod√®les
            if "models_loaded" in api_status and api_status["models_loaded"]:
                st.success("‚úÖ Mod√®les de classification charg√©s")
            else:
                st.warning("‚ö†Ô∏è Mod√®les de classification non disponibles")
            
            if "spacy_models" in api_status:
                spacy = api_status["spacy_models"]
                if spacy.get("fr", False) and spacy.get("en", False):
                    st.success("‚úÖ Mod√®les spaCy charg√©s (FR/EN)")
                else:
                    st.warning(f"‚ö†Ô∏è Mod√®les spaCy incomplets: FR={spacy.get('fr')}, EN={spacy.get('en')}")
        else:
            st.error(f"‚ùå API Indisponible: {api_status.get('error', 'Erreur inconnue')}")
            st.warning(f"V√©rifiez que l'API Flask fonctionne sur {API_URL}")
        
        st.markdown("---")
        st.markdown("### √Ä propos")
        st.info(
    """
    **üìä Application d'Analyse et Classification Automatique de CV**
    
    Cette solution IA permet le traitement intelligent des CV PDF avec extraction des donn√©es cl√©s :

    **üîç Donn√©es extraites :**
    - **Identit√©** : Nom, coordonn√©es, localisation
    - **Exp√©rience** : Postes, entreprises, p√©riodes, missions
    - **Formation** : Dipl√¥mes, √©tablissements, ann√©es
    - **Comp√©tences** : Technologies ma√Ætris√©es (Python, SQL, etc.)
    - **Projets** : R√©alisations concr√®tes et technologies utilis√©es
    - **Langues** : Niveaux certifi√©s ou d√©clar√©s

    **‚ú® Fonctionnalit√©s avanc√©es :**
    - Classification des profils par domaine (Data, Dev, etc.)
    - Cartographie interactive des comp√©tences techniques

    **ü§ñ Technologies :** 
    - NLP (Traitement Langage Naturel)
    - Machine Learning (Random Forest)
    - API Flask pour le traitement backend
    - Streamlit pour l'interface utilisateur
    
    **üë®‚Äçüíª Cr√©√© par Chaker Beltaief**
    """
)
    
    # Corps principal de l'application
    st.title("Analyse et Classification Intelligente de Donn√©es √† partir de CV")
    st.subheader("T√©l√©chargez un CV au format PDF pour l'analyser")
    st.caption("Projet cr√©√© par Chaker Beltaief")
    
    # Zone de t√©l√©chargement de fichier
    uploaded_file = st.file_uploader("Choisissez un fichier PDF", type=["pdf"])
    
    if uploaded_file is not None:
        # Affichage du fichier t√©l√©charg√©
        col1, col2 = st.columns([1, 3])
        
        with col1:
            st.info(f"Fichier: {uploaded_file.name}")
            st.info(f"Taille: {uploaded_file.size / 1024:.2f} Ko")
            
            # Bouton d'analyse
            if st.button("Analyser le CV", type="primary"):
                with st.spinner("Analyse en cours..."):
                    # Lecture du fichier
                    file_bytes = uploaded_file.getvalue()
                    
                    # Appel de l'API pour analyser le CV
                    result = analyze_cv(file_bytes)
                    
                    if result:
                        # Stockage des r√©sultats dans la session
                        st.session_state.cv_result = result
                        st.success("Analyse termin√©e avec succ√®s!")
                        # Utiliser la m√©thode compatible avec les anciennes versions de Streamlit
                        try:
                            st.rerun()  # Pour Streamlit 1.10.0+
                        except AttributeError:
                            st.experimental_rerun()  # Pour les versions ant√©rieures
        
        # V√©rification si des r√©sultats sont disponibles dans la session
        if "cv_result" in st.session_state:
            result = st.session_state.cv_result
            features = result.get("features", {})
            classification = result.get("classification", {})
            
            # Affichage des onglets pour organiser l'information
            tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
               "üìä Classification", "üìû Contact", "üìã R√©sum√©", "üëî Exp√©riences", "üõ†Ô∏è Projets", "üéì Formation", "üîß Comp√©tences", "üåê Languages"
            ])
            
            # --- ONGLET 1: CLASSIFICATION ---
            with tab1:
                st.header("Classification du CV")
                
                if classification:
                    category = classification.get("category", "Non classifi√©")
                    probability = classification.get("probability", 0)
                    
                    st.metric("Cat√©gorie de profil", 
                              category, 
                              f"{probability:.2%}")
                    
                    # Graphique des probabilit√©s
                    st.subheader("R√©partition des probabilit√©s")
                    class_chart = create_classification_chart(classification)
                    if class_chart:
                        st.plotly_chart(class_chart, use_container_width=True)
                else:
                    st.warning("La classification n'est pas disponible (les mod√®les ne sont peut-√™tre pas charg√©s)")
            
            # --- ONGLET 2: CONTACT ---
            with tab2:
                st.header("Profil et Contact")
                
                # En-t√™te avec infos principales
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    # Photo de profil du CV (remplace le logo de la soci√©t√©)
                    # Ici on utilise une image placeholder car l'API n'extrait pas encore la photo du CV
                    st.image("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png", width=150)
                    st.caption("Photo de profil")
                
                with col2:
                    name = features.get("name", "Nom non d√©tect√©")
                    st.header(name)
                    st.subheader(features.get("title", "Poste non d√©tect√©"))
                
                st.markdown("---")
                
                # Infos de contact
                contact = features.get("contact", {})
                if contact:
                    cols = st.columns(2)
                    
                    with cols[0]:
                        if contact.get("email"):
                            st.markdown(f"üìß **Email:** {contact.get('email')}")
                        if contact.get("phone"):
                            st.markdown(f"üì± **T√©l√©phone:** {contact.get('phone')}")
                        if contact.get("location"):
                            st.markdown(f"üìç **Localisation:** {contact.get('location')}")
                    
                    with cols[1]:
                        if contact.get("linkedin"):
                            st.markdown(f"üîó **LinkedIn:** [{contact.get('linkedin')}]({contact.get('linkedin')})")
                        if contact.get("github"):
                            st.markdown(f"üíª **GitHub:** [{contact.get('github')}]({contact.get('github')})")
                        if contact.get("portfolio"):
                            st.markdown(f"üåê **Portfolio:** [{contact.get('portfolio')}]({contact.get('portfolio')})")
                
                    # Liens sociaux
                    st.markdown("---")
                    social_cols = st.columns(3)
                    
                    with social_cols[0]:
                        if contact.get("linkedin"):
                            st.markdown(f"[üîó LinkedIn]({contact.get('linkedin')})")
                    
                    with social_cols[1]:
                        if contact.get("github"):
                            st.markdown(f"[üíª GitHub]({contact.get('github')})")
                    
                    with social_cols[2]:
                        if contact.get("portfolio"):
                            st.markdown(f"[üåê Portfolio]({contact.get('portfolio')})")
                else:
                    st.info("Aucune information de contact d√©tect√©e")
            
            # --- ONGLET 3: R√âSUM√â ---
            with tab3:
                st.header("R√©sum√©")
                
                # R√©sum√©
                if features.get("summary"):
                    st.write(features.get("summary"))
                else:
                    st.info("Aucun r√©sum√© d√©tect√© dans le CV")
            
            # --- ONGLET 4: EXP√âRIENCES ---
            with tab4:
                st.header("Exp√©riences professionnelles")
                display_experiences(features.get("experience", []))
            
            # --- ONGLET 5: PROJETS ---
            with tab5:
                st.header("Projets")
                display_projects(features.get("projects", []))
            
            # --- ONGLET 6: FORMATION ---
            with tab6:
                st.header("Formation")
                display_education(features.get("education", []))
                
            # --- ONGLET 7: COMP√âTENCES ---
            with tab7:
                st.header("Comp√©tences")
                
                col1, col2 = st.columns([2, 3])
                
                with col1:
                    skills = features.get("skills", [])
                    if skills and len(skills) > 0:
                        for skill in skills:
                            st.markdown(f"- {skill}")
                    else:
                        st.info("Aucune comp√©tence d√©tect√©e")
                
                with col2:
                    radar_chart = create_skills_radar(features.get("skills", []))
                    if radar_chart:
                        st.plotly_chart(radar_chart, use_container_width=True)
            
            # --- ONGLET 8: LANGUES ---
            with tab8:
                st.header("Langues")
                if features.get("languages") and len(features.get("languages")) > 0:
                    for language in features.get("languages"):
                        st.markdown(f"- {language}")
                else:
                    st.info("Aucune langue d√©tect√©e")

    # Ajouter un pied de page avec la mention de l'auteur
    st.markdown("---")
    st.markdown("<div style='text-align: center; color: gray; padding: 30px;'>Application d√©velopp√©e par Chaker Beltaief ¬© 2025</div>", unsafe_allow_html=True)

# Ex√©cution de l'application Streamlit
if __name__ == "__main__":
    main()